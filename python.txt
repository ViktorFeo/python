🧱 Типы данных
int — представляет целые числа. Используется для подсчёта, индексов, циклов. Пример: x = 5.
float — числа с плавающей точкой. Применяется, когда важна точность с десятичными дробями. Пример: pi = 3.14.
str — строка текста. Может содержать символы, цифры и пробелы. Пример: name = "Alice".
bool — логические значения: True и False. Часто используется в условиях и проверках.
None — специальный объект, обозначающий отсутствие значения. Используется как заглушка.
list — изменяемый список элементов. Можно добавлять, удалять, изменять значения. Пример: lst = [1, 2, 3].
tuple — неизменяемая (константная) последовательность. Быстрее списка, используется для фиксированных наборов данных.
dict — словарь с парами ключ: значение. Удобен для хранения связанных данных. Пример: {'name': 'Bob', 'age': 30}.
set — множество уникальных элементов. Полезен для исключения дубликатов.
range(start, stop, step) — генератор числовой последовательности, часто используется в циклах.

📦 Работа с переменными
Переменная — это имя, которое указывает на объект в памяти. Присвоение создаёт ссылку.
type(obj) — возвращает тип объекта. Пример: type(3.14) вернёт float.
isinstance(obj, тип) — проверка, принадлежит ли объект к типу. Полезно при написании универсального кода.
id(obj) — возвращает уникальный ID объекта (обычно адрес в памяти).
del — удаляет переменную, элемент списка или ключ словаря.
Присваивание по ссылке — переменные ссылаются на один и тот же объект, если он изменяемый.

➕ Операторы
Арифметические: +, -, *, /, //, %, ** — стандартные действия с числами.
Сравнение: ==, !=, >, <, >=, <= — возвращают True или False при сравнении.
Логические: and, or, not — логические операции между булевыми значениями.
Принадлежность: in, not in — проверка наличия элемента в коллекции.
Идентичность: is, is not — проверяют, указывают ли переменные на один и тот же объект.
Присваивание: =, +=, -= — изменение значения переменной. := — моржовый оператор для присваивания внутри выражений.

🔁 Условия и циклы
if, elif, else — используются для ветвления логики программы.
for — перебирает элементы последовательности (список, строка, range и т. д.).
while — выполняет цикл, пока условие истинно.
break — немедленно завершает цикл.
continue — пропускает оставшуюся часть текущей итерации.
pass — заглушка, которая ничего не делает. Используется при отладке.

🧩 Функции
def — определяет именованную функцию. Позволяет переиспользовать код.
return — завершает выполнение функции и возвращает значение.
lambda — краткая форма функции без имени. Удобна в простых выражениях.
*args — позволяет передать переменное количество позиционных аргументов.
**kwargs — позволяет передать переменное количество именованных аргументов.
map(func, iterable) — применяет функцию к каждому элементу итерации.
filter(func, iterable) — фильтрует элементы, для которых функция возвращает True.
reduce(func, iterable) — последовательно сворачивает элементы, применяя функцию (из модуля functools).
zip(*iterables) — объединяет элементы из нескольких итерируемых объектов.
enumerate(iterable) — возвращает пары индекс-значение при итерации.

🧱 ООП (Объектно-ориентированное программирование)
class — создаёт пользовательский тип (класс).
self — ссылка на текущий экземпляр класса. Используется внутри методов.
__init__ — инициализатор, вызывается при создании объекта.
__str__, __repr__ — определяют строковое представление объекта при выводе.
@staticmethod, @classmethod — методы, которые не требуют экземпляра или работают с классом.
@property — позволяет обращаться к методу как к атрибуту.
Наследование — возможность создать класс на основе другого.
Инкапсуляция — защита данных объекта, соглашения: _ — защищённое, __ — приватное.
Полиморфизм — возможность использовать одинаковый интерфейс для разных типов.

⚠️ Обработка ошибок
try / except — блок для перехвата и обработки ошибок.
else — выполняется, если не было исключений.
finally — выполняется в любом случае, даже при исключении.
raise — возбуждает исключение вручную.
assert — проверка условия, вызывает исключение при ложном выражении (часто для отладки).

📂 Работа с файлами и ввод/вывод
open(filename, mode) — открывает файл в заданном режиме (r, w, a, b и др.).
read(), readline(), readlines() — чтение содержимого файла.
write(), writelines() — запись в файл.
with open() as f: — автоматическое закрытие файла, даже при ошибках.
input() — получает строку от пользователя через консоль.
print() — выводит данные в консоль.

📚 Модули и пакеты
import module — подключает внешний модуль.
from module import name — импортирует только конкретную часть.
as — задаёт псевдоним для модуля/функции.
dir() — список доступных атрибутов объекта или модуля.
help() — встроенная справка по объекту, типу или модулю.
Стандартные модули: os (работа с ОС), sys (параметры интерпретатора), math, random, datetime.
pip — пакетный менеджер Python, устанавливает сторонние библиотеки.

🚀 Продвинутые возможности
yield — делает функцию генератором, сохраняет состояние между вызовами.
Генераторные выражения — компактный способ создания генераторов: (x for x in iterable).
Списковые включения — быстрый способ создания списка: [x for x in iterable if condition].
@decorator — обёртка для функции, добавляющая дополнительное поведение.
with — контекстный менеджер, автоматически управляет ресурсами.
Итераторы — объекты с методами __iter__() и __next__().
__name__ == '__main__' — проверка, запущен ли файл напрямую или импортирован.

🧪 Тестирование
unittest — встроенная библиотека для создания тестов.
pytest — популярный внешний инструмент тестирования, поддерживает фикстуры, параметры и пр.
assert — утверждение, проверяющее условие. Часто используется в тестах.

🛠️ Прочее
globals() / locals() — возвращают текущие глобальные/локальные переменные.
eval(), exec() — выполняют строку как Python-код (использовать с осторожностью!).
Аннотации типов — способ указать ожидаемые типы аргументов и результата: def func(x: int) -> str:
F-строки — форматированные строки: f"Привет, {name}".
time, datetime, calendar — работа со временем, датами и календарями.
collections — дополнительные структуры: deque, defaultdict, Counter и др.
itertools, functools — функциональные инструменты: генераторы, композиции функций и пр.

⚡ Асинхронное программирование
async / await — ключевые слова для создания и использования асинхронных функций.
Позволяют писать код, который не блокирует выполнение при ожидании ввода/вывода или других операций.
Например, полезно для сетевых запросов или работы с базами данных.

asyncio — стандартный модуль для управления асинхронными задачами,
событийным циклом и кооперативной многозадачностью.

🌀 Декораторы с параметрами
Декораторы могут принимать аргументы, что позволяет создавать более гибкие обертки функций.
Для этого обычно используют вложенные функции и дополнительные уровни вложенности.

🏗 Метаклассы
Метакласс — это класс для классов.
Позволяет управлять процессом создания классов, изменять их структуру и поведение во время определения.

⚙️ Контекстные менеджеры
Контекстные менеджеры позволяют управлять ресурсами (файлы, сети, блокировки) с помощью конструкции with.
Для создания своих менеджеров нужно реализовать методы __enter__() и __exit__().

🧵 Многопоточность и многопроцессность
threading — модуль для запуска нескольких потоков внутри одного процесса, полезен для операций с вводом-выводом.

multiprocessing — модуль для параллельного выполнения нескольких процессов, п
олезен для вычислительно тяжёлых задач, обходящих ограничение GIL.

🔍 Регулярные выражения
Модуль re позволяет искать, заменять и проверять текстовые данные с помощью шаблонов регулярных выражений,
что полезно при работе с логами, парсинге и валидации.

🔄 Лямбда-функции (продвинутые)
Лямбда-выражения — компактные анонимные функции. Хороши для кратких операций,
особенно в сочетании с map(), filter(), но могут ухудшать читаемость при сложной логике.

🚨 Кастомные исключения
В Python можно создавать свои классы ошибок, наследуясь от базовых исключений.
Это помогает точнее обрабатывать специфические ошибки приложения.

💾 Сериализация данных
Модули json и pickle позволяют сохранять и загружать объекты Python в текстовом и бинарном формате соответственно,
что удобно для хранения данных и передачи по сети.

📋 Логирование
Модуль logging помогает организовать запись событий, ошибок и информации для отладки и мониторинга работы программы.

🗄 Работа с базами данных
Модуль sqlite3 встроен в Python и позволяет работать с локальными базами SQLite без установки дополнительного ПО.

Для более сложных баз часто используют ORM (Object-Relational Mapping), например, SQLAlchemy.

🧩 Аннотации типов и статическая типизация
Модуль typing позволяет добавлять аннотации типов к переменным, функциям и классам
для улучшения читаемости и поддержки статического анализа кода.

🐍 Виртуальные окружения
Инструменты venv и virtualenv создают изолированные среды для проектов,
чтобы избежать конфликтов зависимостей и версий библиотек.

🧹 Стиль кода
Рекомендации из PEP 8 описывают стандарты оформления кода Python —
от отступов и названий до длины строк и расположения импортов.
Соблюдение стиля улучшает читаемость и поддержку кода.

